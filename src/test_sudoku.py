import unittest

from sudoku import SudokuMethods


SUDOKU_PUZZLES = [
    {'board': '004300209005009001070060043006002087190007400050083000600000105003508690042910300',
     'answer': '864371259325849761971265843436192587198657432257483916689734125713528694542916378'},
    {'board': '040100050107003960520008000000000017000906800803050620090060543600080700250097100',
     'answer': '346179258187523964529648371965832417472916835813754629798261543631485792254397186'},
    {'board': '600120384008459072000006005000264030070080006940003000310000050089700000502000190',
     'answer': '695127384138459672724836915851264739273981546946573821317692458489715263562348197'},
    {'board': '497200000100400005000016098620300040300900000001072600002005870000600004530097061',
     'answer': '497258316186439725253716498629381547375964182841572639962145873718623954534897261'},
    {'board': '005910308009403060027500100030000201000820007006007004000080000640150700890000420',
     'answer': '465912378189473562327568149738645291954821637216397854573284916642159783891736425'},
    {'board': '100005007380900000600000480820001075040760020069002001005039004000020100000046352',
     'answer': '194685237382974516657213489823491675541768923769352841215839764436527198978146352'},
    {'board': '009065430007000800600108020003090002501403960804000100030509007056080000070240090',
     'answer': '289765431317924856645138729763891542521473968894652173432519687956387214178246395'},
    {'board': '000000657702400100350006000500020009210300500047109008008760090900502030030018206',
     'answer': '894231657762495183351876942583624719219387564647159328128763495976542831435918276'},
    {'board': '503070190000006750047190600400038000950200300000010072000804001300001860086720005',
     'answer': '563472198219386754847195623472638519951247386638519472795864231324951867186723945'},
    {'board': '060720908084003001700100065900008000071060000002010034000200706030049800215000090',
     'answer': '163725948584693271729184365946358127371462589852917634498231756637549812215876493'},
    {'board': '004083002051004300000096710120800006040000500830607900060309040007000205090050803',
     'answer': '974183652651274389283596714129835476746912538835647921568329147317468295492751863'},
    {'board': '000060280709001000860320074900040510007190340003006002002970000300800905500000021',
     'answer': '431567289729481653865329174986243517257198346143756892612975438374812965598634721'},
    {'board': '004300000890200670700900050500008140070032060600001308001750900005040012980006005',
     'answer': '254367891893215674716984253532698147178432569649571328421753986365849712987126435'},
    {'board': '008070100120090054000003020604010089530780010009062300080040607007506000400800002',
     'answer': '958274163123698754746153928674315289532789416819462375285941637397526841461837592'},
    # '-' vs 0
    {'board': '-6537---2-----137----64-8---97--4-28-8--9---11---2-94--4---67---7--18-5-23-9---6-',
     'answer': '865379412924581376713642895397164528482795631156823947541236789679418253238957164'},
    {'board': '--571-329---3628----4------1-----98--839--25---6--31--3--1-6---4-98----7-7--295--',
     'answer': '865714329917362845234598761142657983783941256596283174358176492429835617671429538'},
    # '_' vs 0
    {'board': '2____53______7385____1_89_4_7___9__1651____4__4_2___8_3___5____58_76_1__41__3__96',
     'answer': '268495317194673852735128964872549631651387249943216785326951478589764123417832596'},
    {'board': '_4_8__5___8_76__92__1__547__563_9_____9__1__432_5___1____2__7__7___9__3___5__8_26',
     'answer': '947812563583764192261935478156349287879621354324587619698253741712496835435178926'},
    # '.' vs '0'
    {'board': '.5..83.17...1..4..3.4..56.8....3...9.9.8245....6....7...9....5...729..861.36.72.4',
     'answer': '652483917978162435314975628825736149791824563436519872269348751547291386183657294'},
    {'board': '7...84..53..7.1.2..8.26.4.16241.9.388.36...1.........29..........1..579..354....6',
     'answer': '712984365346751829589263471624179538853642917197538642978316254461825793235497186'},
]


SUDOKU_BOARDS_INVALID = [
    '004333209005009001070060043006002087190007400050083000600000105003508690042910300',
    '..43332.9..5..9..1.7..6..43..6..2.8719...74...5..83...6.....1.5..35.869..4291.3..',
]


SUDOKU_PUZZLES_FORMAT = [
    {
        'single': '346179258187523964529648371965832417472916835813754629798261543631485792254397186',
        'spaces': '346179258 187523964 529648371 965832417 472916835 813754629 798261543 631485792 254397186',
        'multi': [
            {
                'placeholder': '0',
                'out': '''3 4 6 ┃ 1 7 9 ┃ 2 5 8
1 8 7 ┃ 5 2 3 ┃ 9 6 4
5 2 9 ┃ 6 4 8 ┃ 3 7 1
─────────────────────
9 6 5 ┃ 8 3 2 ┃ 4 1 7
4 7 2 ┃ 9 1 6 ┃ 8 3 5
8 1 3 ┃ 7 5 4 ┃ 6 2 9
─────────────────────
7 9 8 ┃ 2 6 1 ┃ 5 4 3
6 3 1 ┃ 4 8 5 ┃ 7 9 2
2 5 4 ┃ 3 9 7 ┃ 1 8 6''',
            },
        ],
    },
    {
        'single': '040100050107003960520008000000000017000906800803050620090060543600080700250097100',
        'spaces': '040100050 107003960 520008000 000000017 000906800 803050620 090060543 600080700 250097100',
        'multi': [
            {
                'placeholder': '0',
                'out': '''0 4 0 ┃ 1 0 0 ┃ 0 5 0
1 0 7 ┃ 0 0 3 ┃ 9 6 0
5 2 0 ┃ 0 0 8 ┃ 0 0 0
─────────────────────
0 0 0 ┃ 0 0 0 ┃ 0 1 7
0 0 0 ┃ 9 0 6 ┃ 8 0 0
8 0 3 ┃ 0 5 0 ┃ 6 2 0
─────────────────────
0 9 0 ┃ 0 6 0 ┃ 5 4 3
6 0 0 ┃ 0 8 0 ┃ 7 0 0
2 5 0 ┃ 0 9 7 ┃ 1 0 0''',
            },
            {
                'placeholder': '_',
                'out': '''_ 4 _ ┃ 1 _ _ ┃ _ 5 _
1 _ 7 ┃ _ _ 3 ┃ 9 6 _
5 2 _ ┃ _ _ 8 ┃ _ _ _
─────────────────────
_ _ _ ┃ _ _ _ ┃ _ 1 7
_ _ _ ┃ 9 _ 6 ┃ 8 _ _
8 _ 3 ┃ _ 5 _ ┃ 6 2 _
─────────────────────
_ 9 _ ┃ _ 6 _ ┃ 5 4 3
6 _ _ ┃ _ 8 _ ┃ 7 _ _
2 5 _ ┃ _ 9 7 ┃ 1 _ _''',
            },
        ],
    },
]


class TestSudokuMethods(unittest.TestCase):
    def test_solve_board_solutions(self):
        sudoku = SudokuMethods()
        for puzzle in SUDOKU_PUZZLES:
            sudoku.solve_board(puzzle['board'])
            self.assertEqual(sudoku.format_board(spaces=False), puzzle['answer'])

    def test_solve_board_type(self):
        sudoku = SudokuMethods()
        puzzle = SUDOKU_PUZZLES[0]
        board = sudoku.parse_board(puzzle['board'])
        sudoku.solve_board(board)
        self.assertEqual(sudoku.format_board(spaces=False), puzzle['answer'])
        
    def test_valid_board(self):
        sudoku = SudokuMethods()
        for board in SUDOKU_BOARDS_INVALID:
            self.assertFalse(sudoku.is_valid_board(board))

    def test_format(self):
        sudoku = SudokuMethods()
        for puzzle in SUDOKU_PUZZLES_FORMAT:
            sudoku.set_board(puzzle['single'])

            self.assertEqual(sudoku.format_board(method='single'), puzzle['spaces'])

            self.assertEqual(sudoku.format_board(method='single', spaces=False), puzzle['single'])

            for mp in puzzle['multi']:
                self.assertEqual(sudoku.format_board(method='multi', placeholder=mp['placeholder']), mp['out'])
